{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            /* 
                fast training run that should only take a few seconds. 
                You can view the results in the saved_models directory will be created during the run.
                Increasing num_episodes_per_epoch or num_epochs will lead to longer training times and better results
            */
            "name": "Quick Run",
            "type": "python",
            "request": "launch",
            "program": "train.py",
            "console": "integratedTerminal",
            "env": {
                "PYTHONWARNINGS": "ignore"
            },
            "args": [
                "--algorithm", "maml", // maml, platipus, bmaml, baseline or bmaml_chaser
                "--benchmark", "Sinusoid1D", // Sinusoid1D, Affine1D, Quadratic1D, SinusoidAffine1D
                "--k_shot", "5",
                "--num_episodes_per_epoch", "10", // equals number of training tasks
                "--num_test_tasks", "4",
                "--num_epochs", "10",
            ]
        },
        {
            /*
                a full run that can take up to several hours depending on your machine
            */
            "name": "Full Run",
            "type": "python",
            "request": "launch",
            "program": "train.py",
            "console": "integratedTerminal",
            "env": {
                "PYTHONWARNINGS": "ignore"
            },
            "args": [
                "--algorithm", "maml", // maml, platipus, bmaml, or baseline
                "--benchmark", "Sinusoid1D", // Sinusoid1D, Affine1D, Quadratic1D, SinusoidAffine1D
                "--k_shot", "5",
                "--num_inner_updates", "5",
                "--num_episodes_per_epoch", "60000",
                "--num_test_tasks", "100",
                "--num_epochs", "10",
                "--num_hidden", "3",
            ]
        },
        {
            /*
                Sanity Check for the adaptation step
                Test if the algorithms can overfit to a single training task,
                if we give it enough training data and inner update steps.
            */
            "name": "Adaptation Sanity Check",
            "type": "python",
            "request": "launch",
            "program": "train.py",
            "console": "integratedTerminal",
            "env": {
                "PYTHONWARNINGS": "ignore"
            },
            "args": [
                "--algorithm", "maml", // maml, platipus, bmaml, or baseline
                "--num_inner_updates_testing", "10000", // 0 for initial model, 10000 for many adaptations
                "--num_episodes_per_epoch", "1",
                "--k_shot", "300",
                "--num_points_per_train_task", "512",
                "--num_test_tasks", "1",
                "--num_epochs", "1",
                "--num_episodes", "0",
            ]
        },
        {
            /*
                Sanity check for the meta-update step.
                Test if meta-training can overfit to only one training task.
                For this sanity check only the training plots are relevant.
            */
            "name": "Meta-Update Sanity Check",
            "type": "python",
            "request": "launch",
            "program": "train.py",
            "console": "integratedTerminal",
            "env": {
                "PYTHONWARNINGS": "ignore"
            },
            "args": [
                "--algorithm", "maml",
                "--num_episodes_per_epoch", "1",
                "--num_epochs", "3000",
                "--minibatch", "1",
                "--num_test_tasks", "1",
            ],
        }
    ]
}